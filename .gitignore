# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/

# Task 9 - úkolovník
# Cílem úkolu je vytvořit poznámkový blok V poznámkovém bloku můžeme přidávat,
# odebírat nebo měnit řádky. Když spustíme program tak máme následující možnosti:
#
# Přidat poznámku (nakonec)
# Vypsat všechny poznámky
# Smazat poznámku (budeme vyzváni, jaký řádek smazat)
# Upravit poznámku (budeve vyzváni, jaký řádek a jak upravit)
# Uložit poznámky do souboru .csv (budeme vyzváni do jakého souboru)
# (Volitelně uložení i přes pickle)
# Načíst poznámky ze souboru .csv (budeme vyzváni z jakého souboru)










#import csv
#
#
#
#
#
#notes = []
#
#
#
#def pridat():
#    """
#    prida poznamku na konec ukolovniku
#    :param poznamka: promena pod kterou je poznamkovnik ulozen v pameti
#    :return:
#    """
#    return f"{input("vloz poznamku: ")}"
#
#def vypsat(notes):
#    """
#    vypise obsah aktualniho pracovniho prostoru
#    :param notes:
#    :return:
#    """
#    for line in notes:
#        print(line)
#
#def smazat(notes):
#    """
#    smaze zloveny radek z pracovniho prostoru
#    :param notes:
#    :return:
#    """
#    vypsat(notes)
#    del_row = int(input("ktery radek chcete smazat? Zadejte jeho poradi: ")) - 1
#    notes.pop(del_row)
#    return notes
#
#def upravit(notes):
#    """
#    nahradi zvoleny radek jinym textem
#    :param notes:
#    :return:
#    """
#    vypsat(notes)
#    edit_row = int(input("ktery radek chcete upravit? Zadejte jeho poradi: ")) - 1
#    notes[edit_row] = input(f"zadejte novy text do radku {edit_row + 1}: ")
#    return notes
#
#def ulozit(notes):
#    file = input("zadejte nazev souboru csv: ")
#    if ".csv" in file:
#        file_csv = file
#    else:
#        file_csv = file + ".csv"
#    with open(file_csv, 'a', encoding="utf-8", newline="") as work_file:
#        writer = csv.writer(work_file)
#        for line in notes:
#            writer.writerow([line])
#
#def nacist():
#    file_csv = input("zadejte nazev souboru k nacteni: ")
#    with open(file_csv, 'r', encoding="utf-8", newline="") as work_file:
#        reader = csv.reader(work_file)
#        for line in reader:
#            notes.append(line)
#        print(notes)
#
#
#
#
#seznam_operaci = "seznam moznych operaci: pridat, vypsat, smazat, upravit, ulozit, nacist"   #"Přidat poznámku (nakonec) - \"pridat\"\nVypsat všechny poznámky - \"vypsat\"\nSmazat poznámku (budeme vyzváni, jaký řádek smazat - \"smazat\"\nUpravit poznámku (budeve vyzváni, jaký řádek a jak upravit) - \"upravit\"\nUložit poznámky do souboru .csv (budeme vyzváni do jakého souboru) - \"ulozit\"\nNačíst poznámky ze souboru .csv (budeme vyzváni z jakého souboru) - \"nacist\"\nUkončit ukolovnik - \"ukoncit\""
#
#operace = ""
#while operace != "ukoncit":
#    operace = input(f"{seznam_operaci}\n\nZapsáním klíčového slova uvedeneho v seznamu vyse vyberte požadovanou operaci: ")
#    if operace == "pridat":
#        notes.append(pridat())
#    elif operace == "vypsat":
#        vypsat(notes)
#    elif operace == "smazat":
#        notes = smazat(notes)
#    elif operace == "upravit":
#        notes = upravit(notes)
#    elif operace == "ulozit":
#        ulozit(notes)
#    elif operace == "nacist":
#        nacist()
#    else:
#        print("neznama operace")
#
#
#
## soubor = input("zadejte nazev souboru s priponou .csv")
## with open(soubor)
## while input()

#import pickle
#
#nakupny_zoznam = []
#
## Funkcie
#def pridat_polozku():
#    polozka = input("Zadajte názov položky: ")
#    nakupny_zoznam.append(polozka)
#    print(f"Položka '{polozka}' bola pridaná do zoznamu.")
#
#def vypisat_polozky():
#    if nakupny_zoznam:
#        print("Váš nákupný zoznam:")
#        for i, polozka in enumerate(nakupny_zoznam, start=1):
#            print(f"{i}. {polozka}")
#    else:
#        print("Zoznam je prázdny.")
#
#def zmazat_polozku():
#    vypisat_polozky()
#    try:
#        cislo = int(input("Zadajte číslo položky na zmazanie: "))
#        if 1 <= cislo <= len(nakupny_zoznam):
#            zmazana = nakupny_zoznam.pop(cislo - 1)
#            print(f"Položka '{zmazana}' bola zmazaná.")
#        else:
#            print("Nesprávne číslo.")
#    except ValueError:
#        print("Zadajte platné číslo.")
#
#def upravit_polozku():
#    vypisat_polozky()
#    try:
#        cislo = int(input("Zadajte číslo položky na úpravu: "))
#        if 1 <= cislo <= len(nakupny_zoznam):
#            nova_polozka = input("Zadajte nový názov položky: ")
#            nakupny_zoznam[cislo - 1] = nova_polozka
#            print(f"Položka č. {cislo} bola upravená na '{nova_polozka}'.")
#        else:
#            print("Nesprávne číslo.")
#    except ValueError:
#        print("Zadajte platné číslo.")
#
## ulozit pickle
#def ulozit_do_pickle():
#    nazov_suboru = input("Zadajte názov súboru na uloženie (napr. zoznam.pkl): ")
#    try:
#        with open(nazov_suboru, "wb") as subor:
#            pickle.dump(nakupny_zoznam, subor)
#        print(f"Zoznam bol uložený do súboru '{nazov_suboru}'.")
#    except Exception as e:
#        print(f"Chyba pri ulozeni: {e}")
#
## nacitat pickle
#def nacitat_zo_pickle():
#    nazov_suboru = input("Zadajte názov súboru na načítanie (napr. zoznam.pkl): ")
#    try:
#        with open(nazov_suboru, "rb") as subor:
#             nakupny_zoznam = pickle.load(subor)
#        print(f"Zoznam bol načítaný zo súboru '{nazov_suboru}'.")
#    except Exception as e:
#        print(f"Chyba pri načítaní: {e}")
#
## Hlavné menu
#def menu():
#    while True:
#        print("\nNÁKUPNÝ ZOZNAM")
#        print("1. Pridať položku")
#        print("2. Vypísať všetky položky")
#        print("3. Zmazať položku")
#        print("4. Upraviť položku")
#        print("5. Uložiť zoznam do súboru")
#        print("6. Načítať zoznam zo súboru")
#        print("7. Ukončiť")
#
#        volba = input("Zvoľte možnosť: ")
#
#        if volba == "1":
#            pridat_polozku()
#        elif volba == "2":
#            vypisat_polozky()
#        elif volba == "3":
#            zmazat_polozku()
#        elif volba == "4":
#            upravit_polozku()
#        elif volba == "5":
#            ulozit_do_pickle()
#        elif volba == "6":
#            nacitat_zo_pickle()
#        elif volba == "7":
#            print("Koniec programu.")
#            break
#        else:
#            print("Nesprávna voľba, skúste znova.")
#
#menu()


